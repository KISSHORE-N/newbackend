import React, { useEffect, useState, useMemo } from 'react';
import { useLocation } from 'react-router-dom';
import '../CommonStyles.css'; // ✅ corrected import path

// --- Icon Components ---
const DownloadIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
    <polyline points="7 10 12 15 17 10" />
    <line x1="12" y1="15" x2="12" y2="3" />
  </svg>
);

const ClearIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <circle cx="12" cy="12" r="10" />
    <line x1="15" y1="9" x2="9" y2="15" />
    <line x1="9" y1="9" x2="15" y2="15" />
  </svg>
);

// --- Fallback demo data (for safety) ---
const FALLBACK_REPORTS = [];
for (let i = 1; i <= 10; i++) {
  FALLBACK_REPORTS.push({
    id: 1000 + i,
    rname: `Demo File ${i}`,
    description: 'Static demo file (no backend data received).',
    date: `2024-01-${String(i).padStart(2, '0')}`,
    status: i % 2 === 0 ? 'Processed' : 'Pending',
    url: `/subscriber/reports/demo_${i}.pdf`,
  });
}

function SubscriberDownloadPage() {
  // ✅ New: Read backend data passed from navigation
  const location = useLocation();
  const activeGroup = location.pathname.split('/').pop(); // Example: ops_reports
  const reportsFromNav = location.state?.reports || [];

  // ✅ Use backend data if available; otherwise fallback to demo data
  const reportsForGroup = useMemo(() => {
    return reportsFromNav.length > 0 ? reportsFromNav : FALLBACK_REPORTS;
  }, [reportsFromNav]);

  // --- States ---
  const [selections, setSelections] = useState({});
  const [inputFromDate, setInputFromDate] = useState('');
  const [inputToDate, setInputToDate] = useState('');
  const [filterFromDate, setFilterFromDate] = useState('');
  const [filterToDate, setFilterToDate] = useState('');

  // --- Reset selections and filters when group changes ---
  useEffect(() => {
    const initialSelections = {};
    reportsForGroup.forEach(report => (initialSelections[report.id] = false));
    setSelections(initialSelections);
    setInputFromDate('');
    setInputToDate('');
    setFilterFromDate('');
    setFilterToDate('');
  }, [reportsForGroup]);

  // --- Filter Inputs ---
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    if (name === 'from') setInputFromDate(value);
    else if (name === 'to') setInputToDate(value);
  };

  const handleSearch = () => {
    setFilterFromDate(inputFromDate);
    setFilterToDate(inputToDate);
  };

  const handleClearFilters = () => {
    setInputFromDate('');
    setInputToDate('');
    setFilterFromDate('');
    setFilterToDate('');
  };

  // --- Filtering logic ---
  const filteredReports = useMemo(() => {
    const from = filterFromDate ? new Date(filterFromDate) : null;
    let to = filterToDate ? new Date(filterToDate) : null;
    if (to) to.setHours(23, 59, 59, 999);

    return reportsForGroup.filter((r) => {
      const reportDate = new Date(r.date);
      if (isNaN(reportDate.getTime())) return true;
      const after = from ? reportDate >= from : true;
      const before = to ? reportDate <= to : true;
      return after && before;
    });
  }, [reportsForGroup, filterFromDate, filterToDate]);

  // --- Selection handling ---
  const handleSelect = (id) => {
    setSelections(prev => ({ ...prev, [id]: !prev[id] }));
  };

  const selectedReports = filteredReports.filter(r => selections[r.id]);
  const selectedCount = selectedReports.length;
  const allSelected = selectedCount === filteredReports.length && filteredReports.length > 0;
  const isIndeterminate = selectedCount > 0 && selectedCount < filteredReports.length;

  const handleSelectAll = (e) => {
    const checked = e.target.checked;
    const newSel = { ...selections };
    filteredReports.forEach(r => (newSel[r.id] = checked));
    setSelections(newSel);
  };

  const handleDownloadZip = () => {
    if (selectedCount > 0) {
      alert(`Downloading ${selectedCount} selected reports...`);
    } else {
      alert('Please select at least one report.');
    }
  };

  const pageTitle = activeGroup
    ? `${activeGroup.replace(/_/g, ' ')} Reports`
    : 'Reports';

  return (
    <div className="download-page-wrapper">
      <div className="dashboard-content">

        {/* --- Filter Bar --- */}
        <div className="top-filter-bar">
          <div className="filter-card-content">
            <div className="form-group">
              <label htmlFor="from">From Date</label>
              <input type="date" name="from" id="from" value={inputFromDate} onChange={handleInputChange} />
            </div>
            <div className="form-group">
              <label htmlFor="to">To Date</label>
              <input type="date" name="to" id="to" value={inputToDate} onChange={handleInputChange} />
            </div>
            <button className="action-button filter-search-button" onClick={handleSearch}>Search</button>
            <button
              className="action-button clear-filter-button"
              onClick={handleClearFilters}
              disabled={!filterFromDate && !filterToDate}
            >
              <ClearIcon /> Clear
            </button>
          </div>
        </div>

        {/* --- Download Button --- */}
        <div className="download-action-content">
          <button
            className="action-button secondary-button"
            onClick={handleDownloadZip}
            disabled={selectedReports.length === 0}
          >
            <DownloadIcon /> Download ({selectedReports.length})
          </button>
        </div>

        {/* --- Reports Table --- */}
        <div className="main-reports-area">
          <h3 className="report-title-pagination">{pageTitle} ({filteredReports.length})</h3>

          <div className="table-responsive">
            <table className="data-table">
              <thead>
                <tr>
                  <th style={{ width: '4%' }}>
                    <input
                      type="checkbox"
                      className="select-checkbox"
                      checked={allSelected}
                      ref={(el) => {
                        if (el) el.indeterminate = isIndeterminate;
                      }}
                      onChange={handleSelectAll}
                    />
                  </th>
                  <th style={{ width: '20%' }}>Report Name</th>
                  <th style={{ width: '35%' }}>Description</th>
                  <th style={{ width: '15%' }}>Date</th>
                  <th style={{ width: '10%' }}>Status</th>
                  <th style={{ width: '16%' }}>Download</th>
                </tr>
              </thead>
              <tbody>
                {filteredReports.length > 0 ? (
                  filteredReports.map((report) => (
                    <tr key={report.id}>
                      <td>
                        <input
                          type="checkbox"
                          checked={selections[report.id] || false}
                          onChange={() => handleSelect(report.id)}
                        />
                      </td>
                      <td>{report.rname || report.fileName || `File #${report.id}`}</td>
                      <td><p className="report-description">{report.description || 'No description'}</p></td>
                      <td>{report.date || 'N/A'}</td>
                      <td><span className={`status-tag status-${(report.status || '').toLowerCase()}`}>{report.status || 'Available'}</span></td>
                      <td>
                        <a href={report.url || '#'} download>
                          Download PDF
                        </a>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="6" className="no-reports">No reports found. Try adjusting filters.</td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
}

export default SubscriberDownloadPage;
