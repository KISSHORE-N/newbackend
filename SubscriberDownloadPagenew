import React, { useEffect, useState, useMemo } from 'react';
import { useLocation } from 'react-router-dom';
import '../CommonStyles.css';

const DownloadIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
    <polyline points="7 10 12 15 17 10" />
    <line x1="12" y1="15" x2="12" y2="3" />
  </svg>
);

const ClearIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <circle cx="12" cy="12" r="10" />
    <line x1="15" y1="9" x2="9" y2="15" />
    <line x1="9" y1="9" x2="15" y2="15" />
  </svg>
);

// Fallback (only used if nothing was passed from Dashboard)
const FALLBACK_REPORTS = Array.from({ length: 10 }).map((_, i) => ({
  id: 1000 + i + 1,
  rname: `Demo File ${i + 1}`,
  description: 'Static demo file (no backend data received).',
  date: `2024-01-${String(i + 1).padStart(2, '0')}`,
  status: (i + 1) % 2 === 0 ? 'Processed' : 'Pending',
  url: '#'
}));

function SubscriberDownloadPage() {
  const location = useLocation();
  const activeGroup = location.pathname.split('/').pop();
  const reportsFromNav = location.state?.reports || [];

  const reportsForGroup = useMemo(() => {
    return reportsFromNav.length > 0 ? reportsFromNav : FALLBACK_REPORTS;
  }, [reportsFromNav]);

  const [selections, setSelections] = useState({});
  const [inputFromDate, setInputFromDate] = useState('');
  const [inputToDate, setInputToDate] = useState('');
  const [filterFromDate, setFilterFromDate] = useState('');
  const [filterToDate, setFilterToDate] = useState('');

  useEffect(() => {
    const initial = {};
    reportsForGroup.forEach(r => { initial[r.id] = false; });
    setSelections(initial);
    setInputFromDate('');
    setInputToDate('');
    setFilterFromDate('');
    setFilterToDate('');
  }, [reportsForGroup]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    if (name === 'from') setInputFromDate(value);
    if (name === 'to') setInputToDate(value);
  };

  const handleSearch = () => {
    setFilterFromDate(inputFromDate);
    setFilterToDate(inputToDate);
  };

  const handleClearFilters = () => {
    setInputFromDate('');
    setInputToDate('');
    setFilterFromDate('');
    setFilterToDate('');
  };

  const filteredReports = useMemo(() => {
    const from = filterFromDate ? new Date(filterFromDate) : null;
    let to = filterToDate ? new Date(filterToDate) : null;
    if (to) to.setHours(23, 59, 59, 999);

    return reportsForGroup.filter((r) => {
      const d = r.date ? new Date(r.date) : null;
      if (!d || isNaN(d.getTime())) return true;
      const after = from ? d >= from : true;
      const before = to ? d <= to : true;
      return after && before;
    });
  }, [reportsForGroup, filterFromDate, filterToDate]);

  const handleSelect = (id) => setSelections(prev => ({ ...prev, [id]: !prev[id] }));

  const selected = filteredReports.filter(r => selections[r.id]);
  const allSelected = selected.length === filteredReports.length && filteredReports.length > 0;
  const isIndeterminate = selected.length > 0 && selected.length < filteredReports.length;

  const handleSelectAll = (e) => {
    const checked = e.target.checked;
    const copy = { ...selections };
    filteredReports.forEach(r => (copy[r.id] = checked));
    setSelections(copy);
  };

  const handleDownloadZip = () => {
    if (selected.length === 0) { alert('Please select at least one report.'); return; }
    alert(`Downloading ${selected.length} selected reports...`);
  };

  const pageTitle = activeGroup ? `${activeGroup.replace(/_/g, ' ')} Reports` : 'Reports';

  return (
    <div className="download-page-wrapper">
      <div className="dashboard-content">

        {/* Filters */}
        <div className="top-filter-bar">
          <div className="filter-card-content">
            <div className="form-group">
              <label htmlFor="from">From Date</label>
              <input type="date" name="from" id="from" value={inputFromDate} onChange={handleInputChange} />
            </div>
            <div className="form-group">
              <label htmlFor="to">To Date</label>
              <input type="date" name="to" id="to" value={inputToDate} onChange={handleInputChange} />
            </div>
            <button className="action-button filter-search-button" onClick={handleSearch}>Search</button>
            <button className="action-button clear-filter-button" onClick={handleClearFilters} disabled={!filterFromDate && !filterToDate}>
              <ClearIcon /> Clear
            </button>
          </div>
        </div>

        {/* Download CTA */}
        <div className="download-action-content">
          <button className="action-button secondary-button" onClick={handleDownloadZip} disabled={selected.length === 0}>
            <DownloadIcon /> Download ({selected.length})
          </button>
        </div>

        {/* Table */}
        <div className="main-reports-area">
          <h3 className="report-title-pagination">{pageTitle} ({filteredReports.length})</h3>

          <div className="table-responsive">
            <table className="data-table">
              <thead>
                <tr>
                  <th style={{ width: '4%' }}>
                    <input
                      type="checkbox"
                      className="select-checkbox"
                      checked={allSelected}
                      ref={(el) => { if (el) el.indeterminate = isIndeterminate; }}
                      onChange={handleSelectAll}
                    />
                  </th>
                  <th style={{ width: '20%' }}>Report Name</th>
                  <th style={{ width: '35%' }}>Description</th>
                  <th style={{ width: '15%' }}>Date</th>
                  <th style={{ width: '10%' }}>Status</th>
                  <th style={{ width: '16%' }}>Download</th>
                </tr>
              </thead>
              <tbody>
                {filteredReports.length > 0 ? filteredReports.map((r) => (
                  <tr key={r.id}>
                    <td>
                      <input type="checkbox" className="select-checkbox" checked={selections[r.id] || false} onChange={() => handleSelect(r.id)} />
                    </td>
                    <td>{r.rname || r.fileName || `File #${r.id}`}</td>
                    <td><p className="report-description">{r.description || 'No description'}</p></td>
                    <td>{r.date || 'N/A'}</td>
                    <td><span className={`status-tag status-${(r.status || 'Available').toLowerCase()}`}>{r.status || 'Available'}</span></td>
                    <td>
                      <a href={r.url || '#'} download>
                        Download PDF
                      </a>
                    </td>
                  </tr>
                )) : (
                  <tr><td colSpan="6" className="no-reports">No reports found. Try adjusting filters.</td></tr>
                )}
              </tbody>
            </table>
          </div>

          <br /><br />
        </div>
      </div>
    </div>
  );
}

export default SubscriberDownloadPage;
